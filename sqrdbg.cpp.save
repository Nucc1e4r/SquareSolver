#include <stdio.h>
#include <math.h>
#include "sqrio.h"
#include "eqslv.h"
#include "sqrdbg.h"


//------------------------------------------------------------------------------------------------------------------

void startTests() {

    double tx1 = NAN, tx2 = NAN;

    const TestData tests[] = {

        {.testID = 0, .coeffs = { .a = 0,  .b = 0,  .c = 0 }, .roots = { .x1 = NAN,  .x2 = NAN }, .nRoots = INF},

        {.testID = 1, .coeffs = { .a = 0,  .b = 0,  .c = 1 }, .roots = { .x1 = NAN,  .x2 = NAN }, .nRoots = ZERO},

        {.testID = 2, .coeffs = { .a = 0,  .b = 1,  .c = 0 }, .roots = { .x1 = 0,    .x2 = NAN }, .nRoots = ONE},

        {.testID = 3, .coeffs = { .a = 0,  .b = 1,  .c = 1 }, .roots = { .x1 = -1,   .x2 = NAN }, .nRoots = ONE},

        {.testID = 4, .coeffs = { .a = 1,  .b = 0,  .c = 0 }, .roots = { .x1 = 0,    .x2 = NAN }, .nRoots = ONE},

        {.testID = 5, .coeffs = { .a = 1,  .b = 1,  .c = 0 }, .roots = { .x1 = 0,    .x2 = -1  }, .nRoots = TWO},

        {.testID = 6, .coeffs = { .a = 1,  .b = 1,  .c = 1 }, .roots = { .x1 = NAN,  .x2 = NAN }, .nRoots = ZERO},

        {.testID = 7, .coeffs = { .a = 1,  .b = -6, .c = 5 }, .roots = { .x1 = 5,    .x2 = 1   }, .nRoots = TWO},

        {.testID = 8, .coeffs = { .a = 1,  .b = 5,  .c = 6 }, .roots = { .x1 = -2,   .x2 = -3  }, .nRoots = TWO},

        {.testID = 9, .coeffs = { .a = 1,  .b = 2,  .c = 1 }, .roots = { .x1 = -1,   .x2 = NAN }, .nRoots = ONE},

    };


    for (int i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
        runTest(tests, &tx1, &tx2);
    }

    printf("All tests ran successfully\n\n");
}

//------------------------------------------------------------------------------------------------------------------

void runTest(const TestData* data,
                    double* const x1, double* const x2) {

    bool err = false;

    nSolutions gotNRoots = solveSquare(data->a, data->b, data->c, data->x1, data->x2);

    if (gotNRoots == data->nRoots) {

        switch (data->nRoots) {

            case TWO:

                if (not (*x1 == data->x1 and *x2 == data->x2)) err = true;
                break;


            case ONE:

                if (not (*x1 == data->x1)) err = true;
                break;


            case ZERO:

                break;


            case INF:

                break;


            default:
                printf("!NUMBER OF SOLUTIONS INTERPRETATION ERROR!");
        }

    } else err = true;

    if (err) {

        printTestError(data, gotNRoots, x1, x2);

    } else printf("Test %d passed\n", testID);
}

//---------------------------------------------------------------------------------------------------

void printTestError(const TestData* expecData,
                    const nSolutions realNSol, double* const realX1, double* const realX2) {

    printf("Test %d failed!\n", testID);
    printf("Equation: "); printEquation(expecData->a, expecData->b, expecData->c);

    printf("Expected answer:\n\t");
    printSolution(expecData->nRoots, expecData->x1, expecData->x2);

    printf("Got answer:\n\t");
    printSolution(realNSol, realX1, realX2);
}

//-------------------------------------------------------------------------------------------
